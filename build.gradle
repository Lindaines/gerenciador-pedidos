plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.sonarqube" version "3.5.0.2730"
}

group = 'com.lachonete'
version = '0.0.1-SNAPSHOT'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
ext {
    mapstructVersion = '1.5.2.Final'
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    implementation 'org.projectlombok:lombok:1.18.28'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
//    implementation "org.springframework.boot:spring-boot-starter-security"
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
}


tasks.named('test') {
    useJUnitPlatform()
}
targetCompatibility = JavaVersion.VERSION_16
sourceCompatibility = JavaVersion.VERSION_16


jacocoTestReport {
    dependsOn test // Garante que os testes rodam antes do relatório
    reports {
        xml.required = true // O relatório XML é essencial para o CI
        html.required = true // Opcional: para visualização local
    }
}
jacoco {
    toolVersion = "0.8.8"

}

test {
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

// Tarefa para verificar a cobertura e falhar o build se abaixo do limite
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE' // Aplica a regra a todo o projeto
            // element = 'CLASS' // Você pode aplicar por classe, método, etc.

            limit {
                counter = 'LINE' // Contabilizar cobertura por linha
                value = 'COVEREDRATIO'
                minimum = 0.70 // Mínimo de 80% de cobertura de linha
            }
        }
    }
}
sonarqube {
    properties {
        // ... suas outras propriedades do SonarQube (sonar.host.url, sonar.projectKey, etc.) ...

        // Propriedade para excluir arquivos da avaliação de cobertura
        // Você pode listar múltiplos padrões separados por vírgula
        property "sonar.coverage.exclusions", "com/lachonete/gerenciadorpedidos/configuration/**/*.java"
        // Exemplos:
        // - "**/*Interface.java": Exclui qualquer arquivo Java cujo nome termine em "Interface.java"
        // - "**/model/interfaces/*.java": Exclui todos os arquivos Java dentro de qualquer diretório 'interfaces' que esteja dentro de um diretório 'model'.
        // - "com/lachonete/gerenciadorpedidos/ports/api/*.java": Exclui todas as interfaces no pacote api

        // Opcional: Para ignorar essas interfaces de TODAS as análises (cobertura, bugs, code smells, etc.)
        // Geralmente, você só quer ignorar interfaces da cobertura, mas deixá-las serem analisadas por outros checks.
        // property "sonar.exclusions", "**/interfaces/*.java"
    }
}
// Garante que a verificação de cobertura seja executada no build padrão
check.dependsOn jacocoTestCoverageVerification